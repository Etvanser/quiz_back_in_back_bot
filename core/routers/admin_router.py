from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.database_manager.db_user_handler import DatabaseUserHandler, UserRole
from core.router_recorder import RoutersRecorder
from core.routers import BaseRouter
from errors import ErrorCode
from logger import Logger


class AdminStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    waiting_for_user_input = State()
    waiting_for_username = State()
    waiting_for_role = State()
    waiting_for_delete_confirmation = State()


@RoutersRecorder.record_router
class AdminRouter(BaseRouter):
    """
    –†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """

    def __init__(self, router: Router) -> None:
        self.user_handler = DatabaseUserHandler()
        self.logger = Logger().get_logger()
        super().__init__(router)
        self.logger.info("AdminRouter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _is_admin(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î
        """
        try:
            user_role = await self.user_handler.get_user_role(user_id)
            is_admin = user_role == UserRole.ADMIN if user_role else False

            self.logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: —Ä–æ–ª—å={user_role}, is_admin={is_admin}")
            return is_admin

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: {str(e)}")
            return False

    def _register_handlers(self) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        self.logger.debug("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ AdminRouter")

        # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ /admin
        self.router.message(Command("admin"))(self.admin_panel)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.router.message(AdminStates.waiting_for_user_input)(self.process_user_input)
        self.router.message(AdminStates.waiting_for_username)(self.process_username)
        self.router.message(AdminStates.waiting_for_role)(self.process_role)
        self.router.message(AdminStates.waiting_for_delete_confirmation)(self.process_delete_confirmation)

        # Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.router.callback_query(F.data == "add_user_cmd")(self.add_user_callback)
        self.router.callback_query(F.data == "users_list_cmd")(self.users_list_callback)
        self.router.callback_query(F.data == "delete_users_cmd")(self.delete_users_callback)
        self.router.callback_query(F.data.startswith("role_"))(self.process_role_callback)
        self.router.callback_query(F.data.startswith("quick_add_"))(self.process_quick_add_callback)
        self.router.callback_query(F.data.startswith("delete_user_"))(self.delete_user_callback)
        self.router.callback_query(F.data.startswith("confirm_delete_"))(self.confirm_delete_callback)
        self.router.callback_query(F.data.startswith("cancel_delete_"))(self.cancel_delete_callback)
        self.router.callback_query(F.data == "cancel_operation")(self.cancel_operation)
        self.router.callback_query(F.data == "back_to_admin")(self.back_to_admin_panel)
        self.router.callback_query(F.data == "back_to_user_input")(self.back_to_user_input)
        self.router.callback_query(F.data == "back_to_username")(self.back_to_username_input)

        self.logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ AdminRouter —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def admin_panel(self, target: Message | CallbackQuery) -> None:
        """
        –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –ø—Ä–∞–≤–∞
        """
        if isinstance(target, Message):
            message = target
            user_id = message.from_user.id
        else:
            message = target.message
            user_id = target.from_user.id

        if not await self._is_admin(user_id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞: {user_id}")
            return

        self.logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤—ã–∑–≤–∞–ª –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user_cmd")
            keyboard.button(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list_cmd")
            keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_users_cmd")
            keyboard.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel_operation")
            keyboard.adjust(1)

            if isinstance(target, Message):
                await message.answer(
                    "üõ†Ô∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )
            else:
                await message.edit_text(
                    "üõ†Ô∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

            self.logger.debug(f"–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    async def back_to_admin_panel(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'")
        await state.clear()
        await self.admin_panel(callback)
        await callback.answer()

    async def add_user_callback(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô —Å–ø–æ—Å–æ–± –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'")

        try:
            await state.clear()

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            await callback.message.edit_text(
                "üë§ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –í–≤–µ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                reply_markup=keyboard.as_markup()
            )
            await state.set_state(AdminStates.waiting_for_user_input)
            self.logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_user_input –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}")
            await callback.answer()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def process_user_input(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - ID –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        self.logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {message.text}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
            if message.forward_from:
                await self._handle_forwarded_message(message, state)
                return

            # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ ID
            user_id = int(message.text.strip())
            self.logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self.user_handler.user_exists(user_id):
                self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                keyboard.adjust(1)

                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    reply_markup=keyboard.as_markup()
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(user_id=user_id)
            self.logger.debug(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É username
            await self._ask_for_username(message, state)

        except ValueError:
            self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {message.text}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (ID) –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                "–ü—Ä–∏–º–µ—Ä ID: 123456789",
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", exc_info=True)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞.",
                reply_markup=keyboard.as_markup()
            )

    async def _handle_forwarded_message(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        forwarded_from = message.forward_from
        self.logger.info(
            f"–ê–¥–º–∏–Ω {message.from_user.id} –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {forwarded_from.id}")

        try:
            user_id = forwarded_from.id
            username = forwarded_from.username
            first_name = forwarded_from.first_name or ""
            last_name = forwarded_from.last_name or ""

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self.user_handler.user_exists(user_id):
                self.logger.warning(
                    f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                keyboard.adjust(1)

                await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    f"**ID:** `{user_id}`\n"
                    f"**Username:** @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"**–ò–º—è:** {first_name} {last_name}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            self.logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å username, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
            if username:
                await self._ask_for_role(message, state, user_id, username, first_name, last_name)
            else:
                # –ï—Å–ª–∏ username –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
                await self._ask_for_username(message, state, user_id, first_name, last_name)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def _ask_for_username(self, message: Message, state: FSMContext, user_id: int = None, first_name: str = "",
                                last_name: str = "") -> None:
        """
        –ó–∞–ø—Ä–æ—Å username —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        # –ï—Å–ª–∏ user_id –ø–µ—Ä–µ–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id:
            data = await state.get_data()
            data['user_id'] = user_id
            data['first_name'] = first_name
            data['last_name'] = last_name
            await state.set_data(data)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É", callback_data="back_to_user_input")
        keyboard.adjust(1)

        current_data = await state.get_data()
        user_id = current_data.get('user_id')

        text = f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`\n\n"
        if first_name or last_name:
            text += f"**–ò–º—è:** {first_name} {last_name}\n\n"
        text += "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @). –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' :"

        await message.answer(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await state.set_state(AdminStates.waiting_for_username)
        self.logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_username –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")

    async def _ask_for_role(self, message: Message, state: FSMContext, user_id: int, username: str, first_name: str,
                            last_name: str) -> None:
        """
        –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(username=username)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="role_user")
        keyboard.button(text="üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="role_admin")
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ username", callback_data="back_to_username")
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation")
        keyboard.adjust(2, 1, 1)

        text = f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        text += f"**ID:** `{user_id}`\n"
        text += f"**Username:** @{username}\n"
        if first_name or last_name:
            text += f"**–ò–º—è:** {first_name} {last_name}\n"
        text += f"\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"

        await message.answer(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await state.set_state(AdminStates.waiting_for_role)
        self.logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_role –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")

    async def process_username(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ username
        """
        username = message.text.strip()
        self.logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ username –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {username}")

        try:
            if username == "-":
                username = None
                self.logger.debug("Username —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ None")
            else:
                # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
                username = username.lstrip('@')
                self.logger.debug(f"Username –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {username}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å username
                if not self._is_valid_username(username):
                    self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {username}")

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                    keyboard = InlineKeyboardBuilder()
                    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É", callback_data="back_to_user_input")
                    keyboard.adjust(1)

                    await message.answer(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ username –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:",
                        reply_markup=keyboard.as_markup()
                    )
                    return

            await state.update_data(username=username)
            self.logger.debug(f"Username {username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            user_id = data.get('user_id')
            first_name = data.get('first_name', '')
            last_name = data.get('last_name', '')

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
            await self._ask_for_role(message, state, user_id, username, first_name, last_name)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ username: {str(e)}", exc_info=True)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É", callback_data="back_to_user_input")
            keyboard.adjust(1)

            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ username.",
                reply_markup=keyboard.as_markup()
            )

    async def back_to_user_input(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É'")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        keyboard.adjust(1)

        await callback.message.edit_text(
            "üë§ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –í–≤–µ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n"
            "‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(AdminStates.waiting_for_user_input)
        await callback.answer()

    async def back_to_username_input(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É username
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥ –∫ username'")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data.get('user_id')
        first_name = data.get('first_name', '')
        last_name = data.get('last_name', '')

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É", callback_data="back_to_user_input")
        keyboard.adjust(1)

        text = f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`\n\n"
        if first_name or last_name:
            text += f"**–ò–º—è:** {first_name} {last_name}\n\n"
        text += "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @). –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' :"

        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await state.set_state(AdminStates.waiting_for_username)
        await callback.answer()

    async def delete_users_callback(self, callback: CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await self.user_handler.get_all_users()

            if not users:
                await callback.message.edit_text(
                    "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardBuilder()
                    .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                    .adjust(1)
                    .as_markup()
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardBuilder()

            for user in users:
                # –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞
                if user['role'] == UserRole.ADMIN:
                    continue

                username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                keyboard.button(
                    text=f"üóëÔ∏è {user['first_name']} {user['last_name']} ({username})",
                    callback_data=f"delete_user_{user['user_id']}"
                )

            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            await callback.message.edit_text(
                "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
                "‚ö†Ô∏è *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã*",
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    async def delete_user_callback(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback data
            user_id = int(callback.data.split("_")[2])
            self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã–±—Ä–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_exists = await self.user_handler.user_exists(user_id)
            if not user_exists:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            user_role = await self.user_handler.get_user_role(user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
            if user_role == UserRole.ADMIN:
                await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await state.update_data(delete_user_id=user_id)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{user_id}")
            keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{user_id}")
            keyboard.adjust(2)

            await callback.message.edit_text(
                f"üóëÔ∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n"
                f"**ID:** `{user_id}`\n"
                f"**–†–æ–ª—å:** {user_role.value}\n\n"
                f"‚ö†Ô∏è *–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å*",
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            await state.set_state(AdminStates.waiting_for_delete_confirmation)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def confirm_delete_callback(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback data
            user_id = int(callback.data.split("_")[2])
            self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            state_user_id = data.get('delete_user_id')

            if state_user_id != user_id:
                self.logger.error(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {state_user_id} != {user_id}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∞–¥–º–∏–Ω
            user_exists = await self.user_handler.user_exists(user_id)
            if not user_exists:
                await callback.message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardBuilder()
                    .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                    .adjust(1)
                    .as_markup()
                )
                await state.clear()
                return

            user_role = await self.user_handler.get_user_role(user_id)
            if user_role == UserRole.ADMIN:
                await callback.message.edit_text(
                    "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=InlineKeyboardBuilder()
                    .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                    .adjust(1)
                    .as_markup()
                )
                await state.clear()
                return

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ delete_user –≤ DatabaseUserHandler
            result = await self.user_handler.delete_user(user_id)

            if result == ErrorCode.SUCCESSFUL:
                await callback.message.edit_text(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n"
                    f"**ID:** `{user_id}`\n"
                    f"**–†–æ–ª—å:** {user_role.value}",
                    reply_markup=InlineKeyboardBuilder()
                    .button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
                    .adjust(1)
                    .as_markup(),
                    parse_mode="Markdown"
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_username = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name
                self.logger.info(
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} ({callback.from_user.id}) "
                    f"—É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
            else:
                await callback.message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                    reply_markup=InlineKeyboardBuilder()
                    .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                    .adjust(1)
                    .as_markup()
                )

            await state.clear()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                .adjust(1)
                .as_markup()
            )
            await state.clear()

    async def cancel_delete_callback(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await self.delete_users_callback(callback)

    async def process_delete_confirmation(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        """
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            .adjust(1)
            .as_markup()
        )

    async def users_list_callback(self, callback: CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô —Å–ø–æ—Å–æ–± –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'")

        try:
            users = await self.user_handler.get_all_users()
            self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            if not users:
                await callback.message.edit_text(
                    "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=keyboard.as_markup()
                )
                self.logger.info("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            else:
                user_list = []
                for i, user in enumerate(users, 1):
                    username = f"@{user['username']}" if user['username'] else "–Ω–µ—Ç"
                    last_name = user.get('last_name') or ""
                    first_name = f"{user['first_name']} {last_name}"
                    role_icon = "üõ†Ô∏è" if user['role'] == UserRole.ADMIN else "üë§"
                    role_text = "–ê–¥–º–∏–Ω" if user['role'] == UserRole.ADMIN else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                    user_list.append(
                        f"{i}. {role_icon} ID: `{user['user_id']}` | {username} | {first_name} | {role_text}"
                    )

                users_text = "\n".join(user_list)

                await callback.message.edit_text(
                    f"üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                    f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
                    f"{users_text}",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )
                self.logger.info(f"–°–ø–∏—Å–æ–∫ –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {callback.from_user.id}")

            await callback.answer()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    async def add_user_by_forward(self, message: Message, state: FSMContext) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        """
        forwarded_from = message.forward_from
        self.logger.info(
            f"–ê–¥–º–∏–Ω {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é: {forwarded_from.id}")

        if not forwarded_from:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        try:
            user_id = forwarded_from.id
            username = forwarded_from.username
            first_name = forwarded_from.first_name or ""
            last_name = forwarded_from.last_name or ""

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self.user_handler.user_exists(user_id):
                self.logger.warning(
                    f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
                keyboard.adjust(1)

                await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    f"**ID:** `{user_id}`\n"
                    f"**Username:** @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"**–ò–º—è:** {first_name} {last_name}",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            await state.update_data(
                quick_user_id=user_id,
                quick_username=username,
                quick_first_name=first_name,
                quick_last_name=last_name
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"quick_add_user_{user_id}")
            keyboard.button(text="üõ†Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω–∞", callback_data=f"quick_add_admin_{user_id}")
            keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation")
            keyboard.adjust(1)

            await message.answer(
                f"üë§ **–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
                f"**ID:** `{user_id}`\n"
                f"**Username:** @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"**–ò–º—è:** {first_name} {last_name}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def process_user_id(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {message.text}")

        try:
            user_id = int(message.text.strip())
            self.logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self.user_handler.user_exists(user_id):
                self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                keyboard.adjust(1)

                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID:",
                    reply_markup=keyboard.as_markup()
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(user_id=user_id)
            self.logger.debug(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ ID", callback_data="back_to_user_id")
            keyboard.adjust(1)

            await message.answer(
                "‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—è—Ç.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @). "
                "–ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' :",
                reply_markup=keyboard.as_markup()
            )
            await state.set_state(AdminStates.waiting_for_username)
            self.logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_username –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")

        except ValueError:
            self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {message.text}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:\n"
                "–ü—Ä–∏–º–µ—Ä: 123456789",
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", exc_info=True)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=keyboard.as_markup()
            )

    # async def process_username(self, message: Message, state: FSMContext) -> None:
    #     """
    #     –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ username
    #     """
    #     username = message.text.strip()
    #     self.logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ username –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {username}")
    #
    #     try:
    #         if username == "-":
    #             username = None
    #             self.logger.debug("Username —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ None")
    #         else:
    #             # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
    #             username = username.lstrip('@')
    #             self.logger.debug(f"Username –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {username}")
    #
    #             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å username
    #             if not self._is_valid_username(username):
    #                 self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {username}")
    #
    #                 # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    #                 keyboard = InlineKeyboardBuilder()
    #                 keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ ID", callback_data="back_to_user_id")
    #                 keyboard.adjust(1)
    #
    #                 await message.answer(
    #                     "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n\n"
    #                     "–í–≤–µ–¥–∏—Ç–µ username –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:",
    #                     reply_markup=keyboard.as_markup()
    #                 )
    #                 return
    #
    #         await state.update_data(username=username)
    #         self.logger.debug(f"Username {username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    #
    #         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    #         keyboard = InlineKeyboardBuilder()
    #         keyboard.button(text="üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="role_user")
    #         keyboard.button(text="üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="role_admin")
    #         keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ username", callback_data="back_to_username")
    #         keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation")
    #         keyboard.adjust(2, 1, 1)
    #
    #         await message.answer(
    #             "‚úÖ Username –ø—Ä–∏–Ω—è—Ç.\n\n"
    #             "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
    #             reply_markup=keyboard.as_markup()
    #         )
    #         await state.set_state(AdminStates.waiting_for_role)
    #         self.logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_role –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    #
    #     except Exception as e:
    #         self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ username: {str(e)}", exc_info=True)
    #
    #         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    #         keyboard = InlineKeyboardBuilder()
    #         keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ ID", callback_data="back_to_user_id")
    #         keyboard.adjust(1)
    #
    #         await message.answer(
    #             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ username.",
    #             reply_markup=keyboard.as_markup()
    #         )

    async def process_quick_add_callback(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        self.logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {callback.data}")

        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback data: quick_add_user_123456 –∏–ª–∏ quick_add_admin_123456
            parts = callback.data.split('_')
            role_str = parts[2]  # user –∏–ª–∏ admin
            user_id = int(parts[3])

            role = UserRole.USER if role_str == "user" else UserRole.ADMIN
            self.logger.info(
                f"–ê–¥–º–∏–Ω {callback.from_user.id} –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ä–æ–ª—å—é {role.value}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = await state.get_data()
            username = data.get('quick_username')
            first_name = data.get('quick_first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            last_name = data.get('quick_last_name', '')

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            result = await self.user_handler.add_user(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                role=role
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
            keyboard.adjust(1)

            if result == ErrorCode.SUCCESSFUL:
                role_text = "–æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" if role == UserRole.USER else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                await callback.message.edit_text(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                    f"**ID:** `{user_id}`\n"
                    f"**Username:** {'@' + username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"**–ò–º—è:** {first_name} {last_name}\n"
                    f"**–†–æ–ª—å:** {role_text}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_username = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name
                self.logger.info(
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} ({callback.from_user.id}) "
                    f"—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ä–æ–ª—å—é {role.value} (–±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)"
                )
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                await callback.message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

            await state.clear()
            await callback.answer()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def process_role_callback(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ callback
        """
        self.logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {callback.data}")

        try:
            role_str = callback.data.split("_")[1]  # role_user –∏–ª–∏ role_admin
            role = UserRole.USER if role_str == "user" else UserRole.ADMIN
            self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: {role.value}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            user_id = data.get('user_id')
            username = data.get('username')
            first_name = data.get("first_name")
            last_name = data.get("last_name")

            self.logger.debug(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: user_id={user_id}, username={username}")

            if not user_id:
                self.logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ä–æ–ª—å—é {role.value}")
            result = await self.user_handler.add_user(
                user_id=user_id,
                username=username,
                first_name=first_name,  # –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ
                last_name=last_name,
                role=role
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
            keyboard.adjust(1)

            if result == ErrorCode.SUCCESSFUL:
                role_text = "–æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" if role == UserRole.USER else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                await callback.message.edit_text(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                    f"**ID:** `{user_id}`\n"
                    f"**Username:** {'@' + username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"**–†–æ–ª—å:** {role_text}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_username = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name
                self.logger.info(
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} ({callback.from_user.id}) "
                    f"—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ä–æ–ª—å—é {role.value}"
                )
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                await callback.message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

            await state.clear()
            self.logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}")
            await callback.answer()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏: {str(e)}", exc_info=True)
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
            await callback.answer()

    async def process_role(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ä–æ–ª–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
        """
        role_text = message.text.strip().lower()
        self.logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {role_text}")

        try:
            if role_text in ['user', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–æ–±—ã—á–Ω—ã–π']:
                role = UserRole.USER
            elif role_text in ['admin', '–∞–¥–º–∏–Ω', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']:
                role = UserRole.ADMIN
            else:
                self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Ä–æ–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {role_text}")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_username")
                keyboard.adjust(1)

                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "- 'user' –∏–ª–∏ '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "- 'admin' –∏–ª–∏ '–∞–¥–º–∏–Ω' –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    reply_markup=keyboard.as_markup()
                )
                return

            self.logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç: {role.value}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            user_id = data.get('user_id')
            username = data.get('username')

            self.logger.debug(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: user_id={user_id}, username={username}")

            if not user_id:
                self.logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ä–æ–ª—å—é {role.value}")
            result = await self.user_handler.add_user(
                user_id=user_id,
                username=username,
                first_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                last_name="",
                role=role
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
            keyboard.adjust(1)

            if result == ErrorCode.SUCCESSFUL:
                role_text = "–æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" if role == UserRole.USER else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                await message.answer(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                    f"**ID:** `{user_id}`\n"
                    f"**:*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {'@' + username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"**–§–ò–û:** {username['first_name']} {username['last_name']}"
                    f"**–†–æ–ª—å:** {role_text}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                admin_username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
                self.logger.info(
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} ({message.from_user.id}) "
                    f"—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ä–æ–ª—å—é {role.value}"
                )
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                await message.answer(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                    reply_markup=keyboard.as_markup()
                )

            await state.clear()
            self.logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–æ–ª–∏: {str(e)}", exc_info=True)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ username", callback_data="back_to_username")
            keyboard.adjust(1)

            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=keyboard.as_markup()
            )
            await state.clear()

    async def back_to_user_id_input(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥ –∫ ID'")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        keyboard.adjust(1)

        await callback.message.edit_text(
            "üë§ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(AdminStates.waiting_for_user_input)
        await callback.answer()

    async def cancel_operation(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        self.logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")

        try:
            await state.clear()
            await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await callback.answer()
            self.logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.")

    def _is_valid_username(self, username: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å username
        """
        if not username:
            self.logger.debug("Username –ø—É—Å—Ç–æ–π - –≤–∞–ª–∏–¥–Ω—ã–π")
            return True

        # Telegram username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ a-z, 0-9 –∏ _
        import re
        pattern = r'^[a-zA-Z0-9_]{5,32}$'
        is_valid = bool(re.match(pattern, username))

        if not is_valid:
            self.logger.debug(f"Username '{username}' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        else:
            self.logger.debug(f"Username '{username}' –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")

        return is_valid
